#!/bin/sh

BASEDIR=`dirname $0`
if ! . $BASEDIR/lib/util.sh; then
  echo "FATAL: error sourcing $BASEDIR/lib/util.sh" 1>&2
  exit 99
fi

usage(){
cat << _EOF_
Create symbolic links for tools

Usage:

$ME [options] [directory]

directory is base directory to paste links to (default: current directory)

options:
  -d  set debug level (overrides \$DEBUG)
  -n  dry run
  -s  source directory (default: $BASEDIR)
_EOF_
}

while getopts d:n o; do
  case "$o" in
    d)
      DEBUG=$OPTARG
      debug_sanity
      ;;
    n)  E='echo ';;
    s)  source=$OPTARG
    [?])
      usage
      exit 1
      ;;
  esac
done
debug 19 "\$@=$@" # Can't use @ with debug_vars
shift `expr $OPTIND - 1`
debug_vars 19 OPTIND

[ -n "$E" ] && echo "DRY RUN MODE"

# TODO: Deal with trying to create links inside of $BASEDIR

if [ -n "$1" ]; then
  outdir=$1
  shift
  echo "Creating links in $outdir"
else
  outdir=`pwd`
fi

# cd to $BASEDIR instead of 'find $BASEDIR' so we know the exact path we're getting
cd $BASEDIR
SOURCEDIR=`pwd`
dirs=`find . -type d ! -path . | sed -e 's#^\.[/\]##'`
files=`find . -type f ! -path ./$ME ! -name '.*' ! -path ./LICENSE | sed -e 's#^\.[/\]##'`

cd $outdir

for d in $dirs; do
  $E mkdir -p $d
done

for f in $files; do
  dir=`dirname "$f" | sed -e 's#^\.[/\]##'`
  file=`basename "$f"`
  dest="$dir/$file"
  source="$SOURCEDIR/$dest"
  symdest=`readlink "$dest"`
  debug_vars 3 dir file dest source symdest
  if [ -n "$symdest" ]; then
    [ "$symdest" == "$source" ] || die 3 "link at $dest points to $symdest, not $source"
    # Do nothing if link exists and has correct destination
    debug 1 "Link already exists: $source -> $dest"
  else
    [ -e "$dest" ] && die 3 "$dest already exists (attempting to link $source)"
    $E ln -s $source $dest
  fi
done

# vi: expandtab ts=2 sw=2
